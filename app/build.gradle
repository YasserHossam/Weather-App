plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
} else {
    throw new GradleException("local.properties file not found. Create local.properties file in root project.")
}

if (localProperties['WEATHER_API_KEY'] == null) {
    throw new GradleException("WEATHER_API_KEY not found. Define WEATHER_API_KEY in the local.properties file.")
}

if (localProperties['WEATHER_API_BASE_URL'] == null) {
    throw new GradleException("WEATHER_API_BASE_URL not found. Define WEATHER_API_BASE_URL in the local.properties file.")
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.task.weatherapp"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField 'String', 'WEATHER_API_KEY', '"' + localProperties['WEATHER_API_KEY'] + '"'
            buildConfigField 'String', 'WEATHER_API_BASE_URL', '"' + localProperties['WEATHER_API_BASE_URL'] + '"'

            minifyEnabled false
        }
        release {
            buildConfigField 'String', 'WEATHER_API_KEY', '"' + localProperties['WEATHER_API_KEY'] + '"'
            buildConfigField 'String', 'WEATHER_API_BASE_URL', '"' + localProperties['WEATHER_API_BASE_URL'] + '"'

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation appDependencies.coreKtx
    implementation appDependencies.appCompat
    implementation appDependencies.material
    implementation appDependencies.constraintLayout
    implementation appDependencies.gridLayout

    // Coroutines
    implementation appDependencies.coroutines

    // LifeCycle
    implementation appDependencies.viewModel
    implementation appDependencies.lifecycle

    // Location
    implementation appDependencies.location

    // Permissions
    implementation files('libs/permissions-debug.aar')

    // Dependency Injection (Koin)
    implementation appDependencies.koin

    // Logging
    implementation appDependencies.timber

    // Networking
    implementation appDependencies.retrofit
    implementation appDependencies.gson
    implementation appDependencies.retrofitGson
    implementation appDependencies.retrofitLogging

}